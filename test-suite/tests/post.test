;;  -*-  indent-tabs-mode:nil; coding: utf-8 -*-
;;  === Post tests ===
;;  Copyright (C) 2015
;;      "Mu Lei" known as "NalaGinrut" <NalaGinrut@gmail.com>
;;  Artanis is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  Artanis is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.

;;  You should have received a copy of the GNU General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (test post)
  #:use-module (artanis artanis)
  #:use-module (artanis utils)
  #:use-module (ice-9 receive)
  #:use-module (web response)
  #:use-module (test-suite lib)
  #:use-module (test-suite helper))

;; The newlines are equivalent to \n.

;; TEST1
(define post-test-1-simple-form
  "POST /test1 HTTP/1.1\r
Host: localhost:8080\r
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-us) AppleWebKit/531.2+ (KHTML, like Gecko) Safari/531.2+ Epiphany/2.30.2\r
Content-Type: application/x-www-form-urlencoded\r
Content-Length: 20\r
\r
name=nala&passwd=123
")

(post "/test1" #:from-post #t
  (lambda (rc)
    (let ((body (object->string `((name ,(:from-post rc 'get "name"))
                                  (passwd ,(:from-post rc 'get "passwd"))))))
    (response-emit body
                   #:mtime *unified-modify-time*
                   #:headers `((date . ,*unified-global-date*))))))

(define test1-expect-body "((name \"nala\") (passwd \"123\"))")
(define test1-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@*default-unified-headers*
               (content-length . ,(string-length test1-expect-body)))))
;; ==========================================================

;; TEST2
(define post-test-2-single-file-upload
  "POST /test2 HTTP/1.1\r
Host: localhost:8000\r
Connection: keep-alive\r
Content-Length: 320\r
Cache-Control: max-age=0\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r
Origin: http://localhost:3000\r
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36 SUSE/31.0.1650.63\r
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryimGSqF43tiXYkB0c\r
DNT: 1\r
Referer: http://localhost:3000/upload\r
Accept-Encoding: gzip,deflate,sdch\r
Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2,de;q=0.2\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"upfile\"; filename=\"aa.scm\"\r
Content-Type: text/x-scheme\r
\r
(let ((x (expt 2 10)))\r
  (display x))\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"note\"\r
\r
aa.scm\r
------WebKitFormBoundaryimGSqF43tiXYkB0c--")

(post "/test2" #:from-post 'bv
  (lambda (rc) (:from-post rc 'get)))

(define test2-expect-body
  "------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"upfile\"; filename=\"aa.scm\"\r
Content-Type: text/x-scheme\r
\r
(let ((x (expt 2 10)))\r
  (display x))\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"note\"\r
\r
aa.scm\r
------WebKitFormBoundaryimGSqF43tiXYkB0c--")

(define test2-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@*default-unified-headers*
               (content-length . ,(string-length test2-expect-body)))))
;; ==========================================================

;; TEST3
(define post-test-3-single-file-upload
  "POST /test3 HTTP/1.1\r
Host: localhost:8000\r
Connection: keep-alive\r
Content-Length: 320\r
Cache-Control: max-age=0\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r
Origin: http://localhost:3000\r
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36 SUSE/31.0.1650.63\r
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryimGSqF43tiXYkB0c\r
DNT: 1\r
Referer: http://localhost:3000/upload\r
Accept-Encoding: gzip,deflate,sdch\r
Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2,de;q=0.2\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"upfile\"; filename=\"aa.scm\"\r
Content-Type: text/x-scheme\r
\r
(let ((x (expt 2 10)))\r
  (display x))\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"note\"\r
\r
aa.scm\r
------WebKitFormBoundaryimGSqF43tiXYkB0c--")

(post "/test3" #:from-post '(store #:path "/tmp/upload")
  (lambda (rc)
    (:from-post rc 'store)))

(define test3-expect-body "success")

(define test3-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@*default-unified-headers*
               (content-length . ,(string-length test3-expect-body)))))
;; ===================
   
(with-test-prefix "<Methods> POST test"

  (pass-if "simple form post test"
    (receive (r b) (test-from-request post-test-1-simple-form)
             (responses-equal? r b test1-expect-res test1-expect-body)))

  (pass-if "single file upload test"
    (receive (r b) (test-from-request post-test-2-single-file-upload)
             (responses-equal? r b test2-expect-res test2-expect-body)))

  (pass-if "single file upload store test"
    (receive (r b) (test-from-request post-test-3-single-file-upload)
             (responses-equal? r b test2-expect-res test2-expect-body)))  
  )
