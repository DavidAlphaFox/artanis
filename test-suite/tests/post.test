;;  -*-  indent-tabs-mode:nil; coding: utf-8 -*-
;;  === Post tests ===
;;  Copyright (C) 2015
;;      "Mu Lei" known as "NalaGinrut" <NalaGinrut@gmail.com>
;;  Artanis is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  Artanis is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.

;;  You should have received a copy of the GNU General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (test post)
  #:use-module (artanis artanis)
  #:use-module (artanis upload)
  #:use-module (artanis utils)
  #:use-module (ice-9 receive)
  #:use-module (ice-9 match)
  #:use-module (web response)
  #:use-module (test-suite lib)
  #:use-module (test-suite helper))

;; The newlines are equivalent to \n.

(define (gen-req name)
  (format #f
  "POST /~a HTTP/1.1\r
Host: localhost:8000\r
Connection: keep-alive\r
Content-Length: 320\r
Cache-Control: max-age=0\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r
Origin: http://localhost:3000\r
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36 SUSE/31.0.1650.63\r
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryimGSqF43tiXYkB0c\r
DNT: 1\r
Referer: http://localhost:3000/upload\r
Accept-Encoding: gzip,deflate,sdch\r
Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2,de;q=0.2\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"upfile\"; filename=\"aa.scm\"\r
Content-Type: text/x-scheme\r
\r
(let ((x (expt 2 10)))\r
  (display x))\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"note\"\r
\r
aa.scm\r
------WebKitFormBoundaryimGSqF43tiXYkB0c--" name))

(define  (post-test-5-single-file name)
  (
   format #f
"POST /~a HTTP/1.1\r
Host: localhost:3000\r
Connection: keep-alive\r
Content-Length: 573\r
Cache-Control: max-age=0\r
Origin: http://localhost:3000\r
Upgrade-Insecure-Requests: 1\r
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryIk8cvprF80GcQ22w\r
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r
Referer: http://localhost:3000/patch/upload\r
Accept-Encoding: gzip, deflate, br\r
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8\r
\r
------WebKitFormBoundaryIk8cvprF80GcQ22w\r
Content-Disposition: form-data; name=\"upfile\"; filename=\"README.md\"\r
Content-Type: text/markdown\r
\r
(let ((a \"hello\")\r
      (b \"world\"))\r
  (display a)\r
  (newline)\r
  (dispaly b)\r
  (newline))\r
\r
------WebKitFormBoundaryIk8cvprF80GcQ22w\r
Content-Disposition: form-data; name=\"note\"\r
\r
note\r
------WebKitFormBoundaryIk8cvprF80GcQ22w\r
Content-Disposition: form-data; name=\"description\"\r
\r
description\r
------WebKitFormBoundaryIk8cvprF80GcQ22w\r
Content-Disposition: form-data; name=\"skeleton\"\r
\r
all\r
------WebKitFormBoundaryIk8cvprF80GcQ22w--" name
))
;; TEST1
(define post-test-1-simple-form
  "POST /test1 HTTP/1.1\r
Host: localhost:8080\r
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-us) AppleWebKit/531.2+ (KHTML, like Gecko) Safari/531.2+ Epiphany/2.30.2\r
Content-Type: application/x-www-form-urlencoded\r
Content-Length: 20\r
\r
name=nala&passwd=121
")

(post "/test1" #:from-post #t
  (lambda (rc)
    (let ((body (object->string `((name ,(:from-post rc 'get "name"))
                                  (passwd ,(:from-post rc 'get "passwd"))))))
    (response-emit body
                   #:mtime *unified-modify-time*
                   #:headers `((date . ,*unified-global-date*))))))

(define test1-expect-body "((name \"nala\") (passwd \"123\"))")
(define test1-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@*default-unified-headers*
               (content-length . ,(string-length test1-expect-body)))))
;; ==========================================================

;; TEST2
(define post-test-2-single-file-upload (gen-req "test2"))

(post "/test2" #:from-post 'bv
  (lambda (rc) (:from-post rc 'get)))

(define test2-expect-body
  "------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"upfile\"; filename=\"aa.scm\"\r
Content-Type: text/x-scheme\r
\r
(let ((x (expt 2 10)))\r
  (display x))\r
\r
------WebKitFormBoundaryimGSqF43tiXYkB0c\r
Content-Disposition: form-data; name=\"note\"\r
\r
aa.scm\r
------WebKitFormBoundaryimGSqF43tiXYkB0c--")

(define test2-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@*default-unified-headers*
               (content-length . ,(string-length test2-expect-body)))))
;; ==========================================================

;; TEST3
(define post-test-3-single-file-upload (gen-req "test3"))

(post "/test3" #:from-post '(store #:path "/tmp/upload" #:sync #t)
  (lambda (rc)
    (let ((ret (:from-post rc 'store)))
      (case ret
        ((success) "success")
        (else (throw 'artanis-err 500 "upload failed!" ret))))))

(define test3-expect-body "success")

(define test3-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@*default-unified-headers*
               (content-length . ,(string-length test3-expect-body)))))

(define test3-file "/tmp/upload/aa.scm")
(define test3-expect-file-content
  "(let ((x (expt 2 10)))\r\n  (display x))\r\n")
;; ===================

;; TEST 4
(define post-test-4-single-file-upload-advanced (gen-req "test4"))

(define (upload-stat sl fl) (list (car fl) (car sl)))
(post "/test4"
  #:from-post `(store #:path "/tmp/upload2" #:success-ret ,upload-stat #:simple-ret? #f #:sync #t)
  #:mime 'json
  (lambda (rc)
    (let ((ret (:from-post rc 'store)))
      (match ret
        ((file size)
         (format #t "~a, ~a~%" file size)
         (:mime rc (json (object ("file" ,file) ("size" ,size)))))
        (else (format #t "BUG: ~a~%" ret) "BUG!!!")))))

(define test4-expect-body "{\"file\" : \"aa.scm\",\"size\" : 40}")

(define test4-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@(make-unified-header '(application/json (charset . "utf-8")))
               (content-length . ,(string-length test4-expect-body)))))
;; TEST 5
(define test5-expect-body "{\"description\" : \"description\",\"skeleton\":\"all\",\"note\" : \"note\"}")

(define test5-expect-res
  (build-response
   #:version '(1 . 1)
   #:code 200
   #:headers `(,@(make-unified-header '(application/json (charset . "utf-8")))
               (content-length . ,(string-length test5-expect-body)))))
(define post-test-5-single-file-upload-advanced (post-test-5-single-file "test5"))

(define (upload-stat sl fl) (list (car fl) (car sl)))

(post "/test5"
  #:mime 'json
  (lambda (rc)
    (catch #t
      (lambda ()
        (let* ((mfds-op (get-mfds-from-post rc #:sync #t))
              (note (mfds-op-ref rc mfds-op "note"))
              (description (mfds-op-ref rc mfds-op "desciption"))
              (skeletion (mfds-op-ref rc mfds-op "skeleton")))
          (:mime rc (json (object (description  ,description) (skeleton  ,skeletion)
                             (note . ,note))))))
      (lambda (k . reason)
        (format #t "BUG: ~a~%" reason)
        reason))))

(with-test-prefix "<Methods> POST test"

  (pass-if "simple form post test"
    (receive (r b) (test-from-request post-test-1-simple-form)
             (responses-equal? r b test1-expect-res test1-expect-body)))

  (pass-if "single file upload test"
    (receive (r b) (test-from-request post-test-2-single-file-upload)
             (responses-equal? r b test2-expect-res test2-expect-body)))

  (pass-if "single file upload store test"
    (receive (r b) (test-from-request post-test-3-single-file-upload)
             (responses-equal? r b test3-expect-res test3-expect-body)
             (upload-file-verify test3-file test3-expect-file-content)))

  (pass-if "single file upload store advanced test"
    (receive (r b) (test-from-request post-test-4-single-file-upload-advanced)
             (responses-equal? r b test4-expect-res test4-expect-body)))
  (pass-if "single file upload store advanced test 5"
           (receive (r b) (test-from-request post-test-5-single-file-upload-advanced)
                    (responses-equal? r b test5-expect-res test5-expect-body)))
  )
