* theme (based on template)
* make own favicon.ico (now use opensuse ico instead)
* Fix SSQL bugs
* implement expand-conds for ssql
* write test-cases for ssql
* add cookie's validation
* implement memcached-session swap algorithm
* implement tpl cache
* implement allowed-method?
* design a generic session framework with optional store method: memcached/file+RCU/Berkerley DB...
* Implement co-operative server with delimited-continuation

* green-thread server
  This may need these stuffs:
  1. non-blocking;
  2. scheduling based on delimited-continuations;
  3. guile-dbi needs non-blocking too;
  4. enhanced connection pool;
  5. epoll/kqueue wrapper.
Some ideas:
** Format a patch to guile-dbi for supporting non-blocking. However, now that SQL-query can be blocked, we have to face the connection-pool problem.
   In current implementation, all green-threads works for the same CPU share the same connection from the pool. That's bad, since one of the thread
   can be scheduled-out in non-blocking mode, so the next scheduled-in thread should get a clean connection from the pool.


* Use sendfile on static files, this may need new server-core.
